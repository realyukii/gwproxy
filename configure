#!/bin/sh
#
# SPDX-License-Identifier: GPL-2.0-only
#
# Copyright (C) 2023  Ammar Faizi <ammarfaizi2@gnuweeb.org>
#
# Inspired by liburing's configure script. Taken from teavpn2's project.
#

set -e;

cc=${CC:-gcc};
cxx=${CXX:-g++};
ld=${LD:-$cc};
build_dir=${O:-$(dirname $(realpath $0))};

USER_CFLAGS="${CFLAGS}";
USER_CXXFLAGS="${CXXFLAGS}";
USER_LDFLAGS="${LDFLAGS}";
USER_LIB_LDFLAGS="${LIB_LDFLAGS}";

for opt do
	optarg=$(expr "x$opt" : 'x[^=]*=\(.*\)' || true);
	case "$opt" in
	--help|-h)
		show_help=yes;
	;;
	--build-dir=*)
		build_dir="$optarg";
	;;
	--cc=??*)
		cc="$optarg";
	;;
	--cxx=*)
		cxx="$optarg";
	;;
	--use-raw-dns)
		use_raw_dns="yes";
	;;
	--use-io-uring)
		use_io_uring="yes";
	;;
	--sanitize)
		use_sanitize="yes";
	;;
	--debug)
		use_debug="yes";
	;;
	*)
		echo "ERROR: unknown option $opt";
		echo "Try '$0 --help' for more information";
		exit 1;
	;;
	esac;
done

if test -z "$prefix"; then
	prefix=/usr;
fi

if test -z "$includedir"; then
	includedir="$prefix/include";
fi

if test -z "$libdir"; then
	libdir="$prefix/lib";
fi

if test -z "$libdevdir"; then
	libdevdir="$prefix/lib";
fi

if test -z "$mandir"; then
	mandir="$prefix/man";
fi

if test -z "$datadir"; then
	datadir="$prefix/share";
fi

if test "$show_help" = "yes"; then
cat <<EOF

Usage: ./configure [options]

Options: [defaults in brackets after descriptions]
  --help                   Print this message
  --build-dir=PATH         Set build output in PATH [$build_dir]
  --cc=CMD                 Use CMD as the C compiler
  --cxx=CMD                Use CMD as the C++ compiler
  --debug                  Build with debug enabled
  --use-io-uring           Enable io_uring support (default: no)
  --use-raw-dns            Enable experimental raw DNS backend (default: no)
  --sanitize               Enable sanitizers (default: no)
EOF
exit 0;
fi

mkdir -pv "${build_dir}";
build_dir="$(realpath "${build_dir}")";

tmp_dir="${build_dir}/.tmp";
tmp_o="${tmp_dir}/tmp.o";
tmp_c="${tmp_dir}/tmp.c";
tmp_cpp="${tmp_dir}/tmp.cpp";
tmp_exe="${tmp_dir}/tmp.exe";

mkdir -pv "${tmp_dir}";
rm -f "${build_dir}/config.log";

config_make="${build_dir}/config.make";
config_h="${build_dir}/config.h";
config_log="${build_dir}/config.log";

# NB: do not call "exit" in the trap handler; this is buggy with some shells;
# see <1285349658-3122-1-git-send-email-loic.minier@linaro.org>
trap "rm -rf \"${tmp_dir}\"" EXIT INT HUP QUIT TERM;

fatal()
{
	echo $@;
	echo "Configure failed, check config.log and/or the above output";
	rm -f "${config_make}";
	rm -f "${config_h}";
	exit 1;
}

# Print result for each configuration test
print_config()
{
	printf "  %-55s%s\n" "$1" "$2";
}

# Default flags.
CFLAGS="-O2 -fpic -fPIC -D_GNU_SOURCE -include ${build_dir}/config.h -I./src/";
CXXFLAGS="-O2 -fpic -fPIC -D_GNU_SOURCE -include ${build_dir}/config.h -I./src/";
LDFLAGS="-O2 -fpic -fPIC";
LIB_LDFLAGS="-lpthread";

# Print configure header at the top of $config_h.
printf "/*\n" > $config_h;
printf " * Automatically generated by configure - do not modify!\n" >> $config_h;
printf " *\n" >> $config_h;
printf " * Configured with:" >> $config_h;
printf " * '%s'" "$0" "$@" >> $config_h;
printf "\n" >> $config_h;
printf " */\n" >> $config_h;

printf "# Automatically generated by configure - do not modify!\n" > $config_make;
printf "# Configured with:" >> $config_make;
printf " '%s'" "$0" "$@" >> $config_make;
printf "\n" >> $config_make;

add_config_make()
{
	printf "%s\n" "$1=$2" >> $config_make;
}

add_config_h()
{
	printf "%s\n" "#define $1" >> $config_h;
}

add_config()
{
	add_config_make $1 "y";
	add_config_h $1;
	print_config "Adding $1=y";
}

add_make_var()
{
	printf "%s\n" "$1=$2" >> $config_make;
}

do_cc()
{
	# Run the compiler, capturing its output to the log.
	echo "${cc}" "$@" >> $config_log;
	"${cc}" "$@" >> $config_log 2>&1 || return $?;
	return 0;
}

do_cxx()
{
	# Run the compiler, capturing its output to the log.
	echo "${cxx}" "$@" >> $config_log;
	"${cxx}" "$@" >> $config_log 2>&1 || return $?;
	return 0;
}

compile_cc()
{
	local_cflags="$1";
	local_ldflags="$2 $LIBS";
	printf "\n\nCompiling test case %s:\n" "$3" >> $config_log;
	do_cc $CFLAGS $local_cflags -o "${tmp_exe}" "${tmp_c}" \
		${LDFLAGS} ${local_ldflags};
}

compile_cxx()
{
	local_cxxflags="$1";
	local_ldflags="$2 $LIBS";
	printf "\n\nCompiling test case %s:" "$3" >> $config_log;
	do_cxx $CXXFLAGS $local_cxxflags -o "${tmp_exe}" "${tmp_cpp}" \
		${LDFLAGS} ${local_ldflags};
}

__has_cflags()
{
	cat > $tmp_c << EOF
int main(void)
{
	return 0;
}
EOF
	compile_cc "-Werror $1" "" "$1" || return $?;
	return 0;
}

__has_cxxflags()
{
	cat > $tmp_cpp << EOF
int main(void)
{
	return 0;
}
EOF
	compile_cxx "-Werror $1" "" "$1" || return $?;
	return 0;
}

__has_c_and_cxxflags()
{
	__has_cflags $1 || return $?;
	__has_cxxflags $1 || return $?;
	return 0;
}

add_c_flag()
{
	local_append_flag=$1;
	if test ! -z "$2"; then
		local_append_flag="$2";
	fi;

	if __has_cflags $1; then
		ret=0;
		support="yes";
		CFLAGS="$1 ${CFLAGS}";
	else
		ret=1;
		support="no";
	fi;

	print_config "Does CC  support ${1}?" "${support}";
	return $ret;
}

add_cxx_flag()
{
	local_append_flag=$1;
	if test ! -z "$2"; then
		local_append_flag="$2";
	fi;

	if __has_cxxflags $1; then
		support="yes";
		CXXFLAGS="$1 ${CXXFLAGS}";
	else
		support="no";
	fi;
	ret=$?;

	print_config "Does CXX support ${1}?" "${support}";
	return $ret;
}

add_c_and_cxx_flag()
{
	add_c_flag "$@";
	add_cxx_flag "$@";
}

print_supp()
{
	if test "$1" = "yes"; then
		printf "  %-55s%s\n" "$2" "yes";
	else
		printf "  %-55s%s\n" "$2" "no";
	fi;
}

printf "\n%s:\n" "Compilers";
print_config "CC" "${cc}";
print_config "CXX" "${cxx}";

# Don't exit if add_* functions return non-zero.
set +e;

printf "\n%s:\n" "-W flags";
add_c_and_cxx_flag "-Wall";
add_c_and_cxx_flag "-Wextra";
add_c_and_cxx_flag "-Wsequence-point";
add_c_and_cxx_flag "-Wunreachable-code";
add_c_and_cxx_flag "-Wunreachable-code-loop-increment";
add_c_and_cxx_flag "-Wformat-signedness";
add_c_and_cxx_flag "-Wformat-security";
add_c_and_cxx_flag "-Wformat";
add_c_and_cxx_flag "-Wstack-usage=8192";
add_c_and_cxx_flag "-Wmissing-prototypes";
add_c_and_cxx_flag "-Wstrict-prototypes";
add_c_and_cxx_flag "-Wmissing-variable-declarations";
add_c_and_cxx_flag "-Wstrict-aliasing=3";
add_c_and_cxx_flag "-Wshorten-64-to-32";
add_c_and_cxx_flag "-Wunsafe-loop-optimizations";
add_c_and_cxx_flag "-Wno-format-truncation";

printf "\n%s:\n" "-f flags";
add_c_and_cxx_flag "-fno-stack-protector";
add_c_and_cxx_flag "-fdata-sections";
add_c_and_cxx_flag "-ffunction-sections";
add_c_and_cxx_flag "-fno-strict-aliasing";
add_c_and_cxx_flag "-fvisibility=hidden";

printf "\n%s:\n" "Misc flags";
LDFLAGS="-rdynamic ${LDFLAGS}";
add_c_and_cxx_flag "-ggdb3" && LDFLAGS="-ggdb3 ${LDFLAGS}";

# Bring it back!
set -e;
printf "\n%s:\n" "CONFIG";
if test "${use_io_uring}" = "yes"; then
	add_config "CONFIG_IO_URING";
	CFLAGS="${CFLAGS} -I./src/liburing/src/include";
	CXXFLAGS="${CXXFLAGS} -I./src/liburing/src/include";
fi;

if test "${use_raw_dns}" = "yes"; then
	add_config "CONFIG_RAW_DNS";
fi;

if test "${use_sanitize}" = "yes"; then
	add_config "CONFIG_SANITIZE";
	if ! add_c_and_cxx_flag "-fsanitize=address"; then
		fatal "ERROR: -fsanitize=address is not supported by your compiler";
	fi;
	if ! add_c_and_cxx_flag "-fsanitize=undefined"; then
		fatal "ERROR: -fsanitize=undefined is not supported by your compiler";
	fi;
	LDFLAGS="${LDFLAGS} -fsanitize=address -fsanitize=undefined";
	CFLAGS="${CFLAGS} -fsanitize=address -fsanitize=undefined";
	CXXFLAGS="${CXXFLAGS} -fsanitize=address -fsanitize=undefined";
fi;

add_config "CONFIG_LINUX";

if test "${use_debug}" = "yes"; then
	add_config "CONFIG_DEBUG";
else
	CFLAGS="${CFLAGS} -DNDEBUG";
	CXXFLAGS="${CXXFLAGS} -DNDEBUG";
fi;

# ------ Check for getaddrinfo_a() ------
cat > $tmp_c << EOF
#include <netdb.h>
int main(void)
{
	struct sigevent ev;
	struct gaicb *gc = (void *)0;
	getaddrinfo_a(GAI_NOWAIT, &gc, 1, &ev);
	return 0;
}
EOF
l="Do we have getaddrinfo_a()?";
if compile_cc "" "-lanl" "getaddrinfo_a()"; then
	add_config "CONFIG_HAVE_GETADDRINFO_A";
	print_supp "yes" "${l}";
	LIB_LDFLAGS="${LIB_LDFLAGS} -lanl";
else
	print_supp "no" "${l}";
fi;

add_make_var "CC" "${cc}";
add_make_var "CXX" "${cxx}";
add_make_var "CFLAGS" "$(echo "${CFLAGS} ${USER_CFLAGS}" | awk '{$1=$1};1')";
add_make_var "CXXFLAGS" "$(echo "${CXXFLAGS} ${USER_CXXFLAGS}" | awk '{$1=$1};1')";
add_make_var "LDFLAGS" "$(echo "${LDFLAGS} ${USER_LIB_LDFLAGS}" | awk '{$1=$1};1')";
add_make_var "LIB_LDFLAGS" "$(echo "${LIB_LDFLAGS} ${USER_LIB_LDFLAGS}" | awk '{$1=$1};1')";
printf "override O=%s\n" "${build_dir}" >> $config_make;
ln -s "${config_make}" >> /dev/null 2>&1 || true;
printf "\n";
